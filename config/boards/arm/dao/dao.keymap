/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <200>; };
&mt { quick_tap_ms = <200>; };
// &td { tap_ms = <200>; };


/ {
    chosen {
        zmk,matrix_transform = &default_transform;
        // zmk,matrix_transform = &extra_keys_transform;
    };
};

/ {
    combos {

        combo_screenshot {
            timeout-ms = <50>;
            key-positions = <19 18>;
            bindings = <&kp RG(S) >;
        };
        combo_undo {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp LC(Z) >;
        };
        combo_cut {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&sk RCTRL >;
        };
        combo_copy {
            timeout-ms = <50>;
            key-positions = <18 17>;
            bindings = <&kp LC(C) >;
        };
        combo_paste {
            timeout-ms = <50>;
            key-positions = <5 4>;
            bindings = <&kp LC(V) >;
        };
        compatible = "zmk,combos";
        combo_left_ctrlshift {
            timeout-ms = <50>;
            key-positions = <30 29>;
            bindings = <&kp LS(LCTRL) >;
        };
        combo_left_ctrlalt {
            timeout-ms = <50>;
            key-positions = <29 28>;
            bindings = <&kp LA(LCTRL) >;
        };
        combo_leftshiftalt {
            timeout-ms = <50>;
            key-positions = <30 28>;
            bindings = <&kp LS(LALT) >;
        };
        combo_lefctrltshiftalt {
            timeout-ms = <50>;
            key-positions = <30 29 28>;
            bindings = <&kp LS(LA(LCTRL))>;
        };
        combo_right_ctrlshift {
            timeout-ms = <50>;
            key-positions = <33 34>;
            bindings = <&kp LS(LCTRL) >;
        };
        combo_right_ctrlalt {
            timeout-ms = <50>;
            key-positions = <34 35>;
            bindings = <&kp LA(LCTRL) >;
        };
        combo_right_shiftalt {
            timeout-ms = <50>;
            key-positions = <33 35>;
            bindings = <&kp LS(LALT) >;
        };
        combo_right_ctrlshiftalt {
            timeout-ms = <50>;
            key-positions = <33 34 35>;
            bindings = <&kp LS(LA(LCTRL))>;
        };
    };
};

/ {
 macros {
        ace_jump_pycharm: ace_jump_pycharm {
            label = "Acejump";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
                = <&kp SPACE &kp SPACE &kp S>
                ;
        };
         vim_past_from_zero: vim_past_from_zero {
            label = "vimpastzero";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
                = <&kp LS(SQT) &kp N0 &kp P>
                ;
        };
         vim_past_from_system: vim_past_from_system {
            label = "vimpastsystem";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
                = <&kp LS(SQT) &kp LS(N8) &kp P>
                ;
        };
    };

    behaviors {
        td_f112: tap_dance_f112 {
            compatible = "zmk,behavior-tap-dance";
            label = "td_f112";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp F11>, <&kp F12>;
        };
        td_78: tap_dance_78 {
            compatible = "zmk,behavior-tap-dance";
            label = "td_78";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp LC(KP_N7)>, <&kp LC(KP_N8)>;
        };
        td_49: tap_dance_49 {
            compatible = "zmk,behavior-tap-dance";
            label = "td_49";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp LC(KP_N4)>, <&kp LC(KP_N9)>;
        };
        td_50: tap_dance_50 {
            compatible = "zmk,behavior-tap-dance";
            label = "td_50";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp LC(KP_N5)>, <&kp LC(KP_N0)>;
        };
    };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
          &kp GRAVE            &kp Q   &kp W   &kp E         &kp R      &kp T             &kp Y         &kp U         &kp I         &kp O      &kp P      &kp LBKT       
          &mt LSHIFT           &kp A   &kp S   &kp D         &kp F      &kp G             &kp H         &kp J         &kp K         &kp L      &kp SEMI   &mt RCTRL SQT
          &mt LCTRL RG(SPACE)  &kp Z   &kp X   &kp C         &kp V      &kp B             &kp N         &kp M         &kp COMMA     &kp DOT    &kp FSLH   &mt RALT BSLH
                                               &mt LALT DEL  &kp SPACE  &lt LWR TAB       &lt ADJ ESC   &lt RSE RET   &mt RSHFT BSPC   
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
//  | none  |  SHIFT(Q)  |   none   | SHIFT(E)              |  SHIFT(R) CTRL(R)  |  SHIFT(T)  | none |                  | LA(1)   |  7     |  8    |  9  | PG_UP| PG_DN|
//  | SHIFT |  SHIFT(A)  | SHIFT(S) | SHIFT(D) CTRL (D)     |  SHIFT(F)          |  none      | none |                  | LA(F11) |  4     |  5    |  6  | none | none|
//  | CTRL  |  SHIFT(Z)  | SHIFT(X) | CTRL (C) CTRL+SHIFT+C |  SHIFT(V)          |  none      | none |                  | LR(F12) |  1     |  2    |  3  | .    | none|
//                                                          |  CTRL(Z)           |  TRANS     | ESC  |                  | TRANS   |  0     | BCSP |
                        bindings = <
   &kp K_VOL_UP     &kp K_NEXT    &kp K_PREV    &kp INS       &none     &none               &kp LA(N1)    &kp N7   &kp N8   &kp N9   &kp PG_UP &kp PG_DN 
   &kp K_PLAY_PAUSE &kp LC(KP_N1) &kp LC(KP_N2) &kp LC(KP_N3) &td_49    &td_50              &kp LA(F11)   &kp N4   &kp N5   &kp N6   &kp HOME  &kp END
   &kp K_VOL_DN     &kp LC(KP_N6) &none         &none         &none     &td_78              &kp LA(F12)   &kp N1   &kp N2   &kp N3   &kp DOT   &none
                                                &trans        &trans    &trans              &trans        &kp N0   &kp BSPC   
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |none | none |  =   |  +  |  none  |  none  |  none  |         | shift F10| shift alt F9| run line pycharm  |-   | _   | ]      |none|
//       | none |  !   |  @  |  #     |  $     |  %     |         | ^            | &           |  *                | (  | )   | none   |
//       | none |  F1  | F2  |  F3    |  F4    |  F5    |         | F6           | F7          | F8                | F9 | F10 | F11 F12|
//                              | TRANS |  TRANS   | TRANS |        | TRANS | TRANS  | TRANS |
                        bindings = <
   &trans &none &kp EQUAL &kp LS(EQUAL) &none &none &none    &kp LS((F10)) &kp LS(LA(F9)) &kp LS(LA(LC(F9))) &kp MINUS &kp LS(MINUS) &kp RBKT &none
          &none &kp LS(N1) &kp LS(N2) &kp LS(N3) &kp LS(N4) &kp LS(N5)        &kp LS(N6) &kp LS(N7) &kp LS(N8) &kp LS(N9) &kp LS(N0) &none
          &none &kp F1 &kp F2 &kp F3 &kp F4 &kp F5        &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 &td_f112
                                  &trans &trans &trans   &trans &trans &trans
                        >;
                };

        };
};
